// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRepo = `-- name: GetRepo :one
SELECT id, owner, name, token, isprivate, createdat, updatedat FROM repository
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRepo(ctx context.Context, id pgtype.UUID) (Repository, error) {
	row := q.db.QueryRow(ctx, getRepo, id)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Token,
		&i.Isprivate,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const listRepositories = `-- name: ListRepositories :many
SELECT id, owner, name, token, isprivate, createdat, updatedat FROM repository
ORDER BY name
`

func (q *Queries) ListRepositories(ctx context.Context) ([]Repository, error) {
	rows, err := q.db.Query(ctx, listRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.Token,
			&i.Isprivate,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
